loadstring(game:HttpGet("https://raw.githubusercontent.com/RedZenXYZ/RedHub/main/Red_GuiScript"))()

local Plr = game:GetService("Players").LocalPlayer

local Places = {
	["Outside"] = CFrame.new(237, 3, -106),
	["Prison"] = CFrame.new(77, 3, -104),
	["Basement"] = CFrame.new(468, -6, -89),
	["Burger"] = CFrame.new(235, 3, -598)
}

local WeaponsName = {
	"Axe",
	"Pickaxe",
	"Fist",
	"Bat",
	"Knife",
	"Hammer",
	"Bag",
	"Pliers",
	"Handsaw",
	"Screwdriver",
	"Crowbar",
	"PoliceBaton"
}

RedGui()
createPage("Combat")

addToggle("Attack", function()
	for _, weapon in pairs(Plr.Backpack:GetChildren()) do
		if table.find(WeaponsName, weapon.Name) then
			Equip(weapon)
		end
	end
	for _, weapon in pairs(Plr.Character:GetChildren()) do
		if weapon:IsA("Tool") then
			weapon:Activate()
		end
	end
end)

addToggle("Heal", function()
	if Plr.Character:FindFirstChildOfClass("Humanoid").Health <= 90 then
		if Plr.Character:FindFirstChild("Hamburger") and not Plr.Backpack:FindFirstChild("Hamburger") then
			game:GetService("ReplicatedStorage"):FindFirstChild("EatingEvent"):FireServer(Plr.Character, Plr.Character:FindFirstChild("Hamburger"), "Heal")
			Plr.Character:FindFirstChild("Hamburger").Parent = Plr.Backpack
		elseif not Plr.Character:FindFirstChild("Hamburger") and Plr.Backpack:FindFirstChild("Hamburger") then
			Equip("Hamburger")
		elseif not Plr.Character:FindFirstChild("Hamburger") and not Plr.Backpack:FindFirstChild("Hamburger") then
			FireClick(workspace.Hamburger)
		end
	end
end)

addToggle("Instant Undo", function()
	game:GetService("ReplicatedStorage"):WaitForChild("IsHog"):FireServer(Plr.Character, "UnHog")
	game:GetService("ReplicatedStorage"):WaitForChild("UnCuffed"):FireServer(Plr.Character)
	game:GetService("ReplicatedStorage"):WaitForChild("CollarRemove"):FireServer(Plr.Character, "Collar")
	for i,con in next,getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Avatar.Undo.MouseButton1Click) do
		spawn(con.Function)
	end
end)

createPage("Aura")

local KillAuraDistance = addTextBox("30", "Kill Aura Distance")

addToggle("Kill Aura", function()
	local MaxDistance = tonumber(KillAuraDistance.Text)
	for _, Target in next,getPlayer("nearest", {["Team"] = true, ["Distance"] = MaxDistance}) do
		for _, weapon in pairs(Plr.Character:GetChildren()) do
			if weapon:IsA("Tool") then
				game:GetService("ReplicatedStorage").Combat:FireServer(Plr.Character, Target.Character.Head, weapon)
			end
		end
	end
end)

local TaseAuraDistance = addTextBox("10", "Tase Aura Distance")

addToggle("Tase Aura", function()
	local MaxDistance = tonumber(TaseAuraDistance.Text)
	for _, Target in next,(getPlayer("others", {["Team"] = true, ["Distance"] = MaxDistance})) do
		game:GetService("ReplicatedStorage"):WaitForChild("Tase"):FireServer("Hit", game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Taser"), Target.Character.Torso)
		game:GetService("ReplicatedStorage"):WaitForChild("Tase"):FireServer("Recharge", game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Taser"))
	end
end)

addToggle("Cuffs Aura", function()
	for _, Target in next,(getPlayer("others", {["Team"] = true})) do
		spawn(function()
			pcall(function()
				for _, cuffs in pairs(Plr.Backpack:GetChildren()) do
					if cuffs.Name:find("Handcuffs") then
						spawn(function()
							pcall(function()
								game:GetService("ReplicatedStorage"):FindFirstChild("IsCuffed"):FireServer(cuffs, Target.Character)
							end)
						end)
					end
				end
			end)
		end)
	end
end)

addToggle("Rope Aura", function()
	for _, Target in next,(getPlayer("others", {["Team"] = true})) do
		spawn(function()
			pcall(function()
				game:GetService("ReplicatedStorage"):FindFirstChild("IsHog"):FireServer(Target.Character, "Hog")
			end)
		end)
	end
end)

addToggle("Grab Aura", function()
	for _, Target in next,(getPlayer("others", {["Team"] = true})) do
		spawn(function()
			pcall(function()
				game:GetService("ReplicatedStorage"):FindFirstChild("Grab"):FireServer(Target.Character, "Grab")
			end)
		end)
	end
end)

createPage("Tools")

addButton("Get Hamburger", function()
	Dupe("Hamburger", workspace.Hamburger)
end)

addButton("Get Weapons", function()
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA("Tool") and v:FindFirstChildOfClass("ClickDetector") then
			FireClick(v)
		end
	end
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name == "Broom" or v.Name == "Collar" or v.Name == "Bat" or v.Name == "Food" or v.Name == "BlindFold" then
			for i, click in pairs(v:GetDescendants()) do
				if click:IsA("ClickDetector") then
					fireclickdetector(click)
				end
			end
		end
	end
end)

createPage("Teleports")

for name, cframe in pairs(Places) do
	addButton(name, function()
		Teleport(cframe)
	end)
end

createPage("Others")

addButton("Close Choosing UI", function()
	if Plr.PlayerGui.Menu.TeamMenu.Visible == true then
		Plr.PlayerGui.Menu.TeamMenu.Visible = false
		Plr.PlayerGui.Menu.OpenAndClose.Visible = true
		Plr.PlayerGui.Stamina.StaminaBarFrame.Visible = true
		Plr.PlayerGui.Schedule.CurrentSchedule.Visible = true
		Plr.PlayerGui.VoteKickPanel.OpenCloseButton.Visible = true
		Plr.PlayerGui.Animation.Enabled = true
		Plr.PlayerGui.Hostile.Hostile.Visible = true
		Plr.PlayerGui.Hostile.Status.Visible = true
		Plr.PlayerGui.Hostile.Status.ZIndex = 0
	elseif Plr.PlayerGui.Menu.TeamMenu.Visible == false then
		Plr.PlayerGui.Menu.TeamMenu.Visible = true
		Plr.PlayerGui.Menu.OpenAndClose.Visible = false
		Plr.PlayerGui.Stamina.StaminaBarFrame.Visible = false
		Plr.PlayerGui.Schedule.CurrentSchedule.Visible = false
		Plr.PlayerGui.VoteKickPanel.OpenCloseButton.Visible = false
		Plr.PlayerGui.Animation.Enabled = false
		Plr.PlayerGui.Hostile.Hostile.Visible = false
		Plr.PlayerGui.Hostile.Status.Visible = false
		Plr.PlayerGui.Hostile.Status.ZIndex = 0
	end
end)

addButton("No Jump Limit", function()
	Plr.Character.JumpLimit:Destroy()
end)

addButton("Free Import Gamepass", function()
	local Old;
	Old = hookmetamethod(game, "__namecall", function(...)
	   if not checkcaller() and getnamecallmethod() == "UserOwnsGamePassAsync" then
	       return true
	   end
	   return Old(...)
	end)
end)

createPage("Modding Tool")

addButton("Taser", function()
	game:GetService("Players").LocalPlayer.Character.Taser.Activated:Connect(function()
		pcall(function()
			local mouse = game:GetService("Players").LocalPlayer:GetMouse()
			local CFRAME = mouse.hit
			local Target = mouse.target
			local pos = Vector3.new(CFRAME.X, CFRAME.Y, CFRAME.Z)
			
			game:GetService("ReplicatedStorage"):WaitForChild("Tase"):FireServer("Hit", game:GetService("Players").LocalPlayer.Character:FindFirstChild("Taser"), Target.Parent.Torso)
			game:GetService("ReplicatedStorage"):WaitForChild("Tase"):FireServer("Generate", game:GetService("Players").LocalPlayer.Character.Taser, game:GetService("Players").LocalPlayer.Character.Taser.Handle.Position, pos)
			game:GetService("ReplicatedStorage"):WaitForChild("Tase"):FireServer("Recharge", game:GetService("Players").LocalPlayer.Character:FindFirstChild("Taser"))
		end)
	end)
end)

workspace.FallenPartsDestroyHeight = -50000

function Teleport(CFrame)
	Plr.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame
end

function FireClick(Part)
	if Part:FindFirstChildOfClass("ClickDetector") then
		fireclickdetector(Part:FindFirstChildOfClass("ClickDetector"))
	end
end

function Dupe(ToolName, ClickPart)
	for _, tool in next,Plr.Backpack:GetChildren() do
		if tool.Name == ToolName then
			Equip(tool)
		end
	end
	
	FireClick(ClickPart)
end

function Equip(Name)
	if typeof(Name) == "string" then
		if Plr.Backpack:FindFirstChild(Name) then
			Plr.Backpack:FindFirstChild(Name).Parent = Plr.Character
		end
	elseif Name:IsA("Tool") then
		Name.Parent = Plr.Character
	end
end

function GetPlayersTeam()
	local TeamCheckedPlayers = {}
	for _, plr in pairs(game.Players:GetPlayers()) do
		if plr ~= game.Players.LocalPlayer and plr.Team ~= game.Players.LocalPlayer.Team then
			table.insert(TeamCheckedPlayers, plr)
		end
	end
	
	return TeamCheckedPlayers
end

function GetUnBlockingPlayers(Check, Pos)
	local player = game.Players.LocalPlayer
	if Check == true then
		players = GetPlayersTeam()
	else
		players = game.Players:GetPlayers()
	end
	
	local LocalCharacter = game:GetService("Players").LocalPlayer.Character
	local Players = {}
	for _, plr in pairs(players) do
		if plr ~= player and plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health ~= 0 then
			local Ray = Ray.new(Pos, (plr.Character.PrimaryPart.Position - Pos))
			local part = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray, {LocalCharacter})
			if part ~= nil then
				if part:IsDescendantOf(plr.Character) then
					table.insert(Players, plr)
				end
			end
		end
	end
	
	return Players
end

function getPlayer(String, Information)
	local Info = {
		["Raycasting"] = false,
		["Team"] = false,
		["Position"] = game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position,
		["Distance"] = math.huge
	}
	if Information ~= nil then
		for name, value in pairs(Information) do
			if Info[name] ~= nil then
				Info[name] = value
			end
		end
	end
	if Info["Raycasting"] == true and Info["Team"] == true then
		players = GetUnBlockingPlayers(true, Info["Position"])
	elseif Info["Raycasting"] == true and Info["Team"] == false then
		players = GetUnBlockingPlayers(false, Info["Position"])
	elseif Info["Team"] == true and Info["Raycasting"] == false then
		players = GetPlayersTeam()
	else
		players = game:GetService("Players"):GetPlayers()
	end
	local Found = {}
	local strl = String:lower()
	if strl == "" then
		return
	elseif strl == "all" then
		for i,v in pairs(players) do
			pcall(function()
				if (game.Players.LocalPlayer.Character.PrimaryPart.Position - v.Character.PrimaryPart.Position).magnitude <= Info["Distance"] then
					table.insert(Found, v)
				end
			end)
		end
	elseif strl == "others" then
		for i,v in pairs(players) do
			if v ~= game:GetService("Players").LocalPlayer and (game.Players.LocalPlayer.Character.PrimaryPart.Position - v.Character.PrimaryPart.Position).magnitude <= Info["Distance"] then
				table.insert(Found, v)
			end
		end
	elseif strl == "me" then
		table.insert(Found, game:GetService("Players").LocalPlayer)
	elseif strl == "random" then
		local localplayer = game:GetService("Players").LocalPlayer
		local playersTable = {}
		for _, plr in pairs(players) do
			pcall(function()
				if plr ~= localplayer and (game.Players.LocalPlayer.Character.PrimaryPart.Position - plr.Character.PrimaryPart.Position).magnitude <= Info["Distance"] then
					table.insert(playersTable, plr)
				end
			end)
		end
		table.insert(Found, playersTable[math.random(1, #playersTable)])
	elseif strl == "nearest" then
		local player = game:GetService("Players").LocalPlayer
		if player.Character then
			character = player.Character
			ohVector32 = character.PrimaryPart.Position
		else
			return
		end
		local closestPlayer, closestDistance
		for _, p in pairs(players) do
			if p ~= player and p.Character and p.Character:FindFirstChildOfClass("Humanoid") and p.Character:FindFirstChildOfClass("Humanoid").Health ~= 0 then
				local distance = (ohVector32 - p.Character.PrimaryPart.Position).Magnitude
				if not closestDistance or distance < closestDistance then
					closestDistance = distance
					closestPlayer = p
				end
			end
		end
		if closestPlayer then
			table.insert(Found, closestPlayer)
		end
	else
		for i,v in pairs(players) do
			if (v.Name:lower():sub(1, #String) == String:lower() or v.DisplayName:lower():sub(1, #String) == String:lower()) and (game.Players.LocalPlayer.Character.PrimaryPart.Position - v.Character.PrimaryPart.Position).magnitude <= Info["Distance"] then
				table.insert(Found, v)
			end
		end
	end
	
	return Found    
end
